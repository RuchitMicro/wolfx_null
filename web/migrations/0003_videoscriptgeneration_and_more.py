# Generated by Django 4.2.7 on 2025-04-03 10:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('web', '0002_post_socialmedia_postschedule_post_social_media_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='VideoScriptGeneration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra_params', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.CharField(blank=True, max_length=300, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=300, null=True)),
                ('source', models.URLField(blank=True, help_text='URL of the text source (if available)', max_length=300, null=True)),
                ('topic', models.CharField(max_length=300)),
                ('content', models.TextField(help_text='Detailed content from the blog')),
                ('llm_prompt', models.TextField(help_text='Prompt for the LLM to generate a video script')),
                ('generated_video_script', models.TextField(blank=True, help_text='The generated video script based on the LLM prompt and text content', null=True)),
                ('video_file', models.FileField(blank=True, help_text='Generated video file from the video script', null=True, upload_to='video_scripts/')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Processing status', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing fails', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='historicalpost',
            name='social_media',
        ),
        migrations.RemoveField(
            model_name='post',
            name='social_media',
        ),
        migrations.AlterField(
            model_name='historicalpost',
            name='image',
            field=models.TextField(blank=True, help_text='Absolute Media URL', null=True),
        ),
        migrations.AlterField(
            model_name='historicalpost',
            name='text',
            field=models.TextField(blank=True, help_text='Text content of the post', null=True),
        ),
        migrations.AlterField(
            model_name='historicalpost',
            name='video',
            field=models.TextField(blank=True, help_text='Absolute Media URL', null=True),
        ),
        migrations.AlterField(
            model_name='post',
            name='image',
            field=models.TextField(blank=True, help_text='Absolute Media URL', null=True),
        ),
        migrations.AlterField(
            model_name='post',
            name='text',
            field=models.TextField(blank=True, help_text='Text content of the post', null=True),
        ),
        migrations.AlterField(
            model_name='post',
            name='video',
            field=models.TextField(blank=True, help_text='Absolute Media URL', null=True),
        ),
        migrations.CreateModel(
            name='HistoricalVideoScriptGeneration',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('extra_params', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('created_by', models.CharField(blank=True, max_length=300, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=300, null=True)),
                ('source', models.URLField(blank=True, help_text='URL of the text source (if available)', max_length=300, null=True)),
                ('topic', models.CharField(max_length=300)),
                ('content', models.TextField(help_text='Detailed content from the blog')),
                ('llm_prompt', models.TextField(help_text='Prompt for the LLM to generate a video script')),
                ('generated_video_script', models.TextField(blank=True, help_text='The generated video script based on the LLM prompt and text content', null=True)),
                ('video_file', models.TextField(blank=True, help_text='Generated video file from the video script', max_length=100, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Processing status', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing fails', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical video script generation',
                'verbose_name_plural': 'historical video script generations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
